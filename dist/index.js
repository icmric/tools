async function e(e,t){let a=e.url.split(/\/|\?/)[1],r=e.query;const{services:l,getSchema:n}=t,{ItemsService:i}=l,s=new i("api_parents",{schema:await n(),accountability:e.accountability});let u;try{u=await s.readByQuery({fields:["*","api.*"],filter:{title:{_eq:a}}})}catch(e){}if(""==u)return s.readByQuery({fields:["title"]});let o={};if(null!=u[0].extra_values)for(let e=0;e<u[0].extra_values.length;e++){let t=u[0].extra_values[e].key,a=u[0].extra_values[e].value;o[t]=a}let c=u[0].api,y=u[0];t.data={},t.data.reqAccountability=e.accountability,t.data.$url=r,t.data.$tool={},t.data.$tool.main=h(y.main);let f,d={request:null};return 0==(null==c.request||c.request=={})&&(d.request=h(c.request)),t.data.apiResponse=await async function(e,t){const{method:a,url:r,header:l}=e;let n,i={};null!=l&&l.forEach((e=>{i[e.header_title]=e.header_content}));0!=Object.keys(o).length&&(i=o);let s={method:e.method,headers:null!=i?i:null};null!=t&&(s.body=JSON.stringify(t));return n=await fetch(e.url,s).then((e=>e.json())),d.response=n,n}(c,d.request),f=null!=c.transform?await h(c.transform):t.data.apiResponse,f;function p(e){return e.replace(/{(.*)}/g,((e,a)=>{let r=("data."+a).trim().split(".").reduce(((e,t)=>e&&"object"==typeof e?e[t]:"Blank"),t);let l;return l="string"==typeof r?r:JSON.stringify(r),void 0!==l?l:e}))}function h(e){if("string"==typeof e){let t=p(e);try{return JSON.parse(t)}catch(e){return t}}else{if(Array.isArray(e))return e.map((e=>h(e)));if(null!==e&&"object"==typeof e){const t={};for(const a in e)e.hasOwnProperty(a)&&(t[a]=h(e[a]));return t}}return e}}let t,a;var r=(r,l)=>{r.get("/*",(async(r,n)=>{t=r,a=l;let i=await e(t,a);n.send(i)}))};export{a as contextExport,r as default,t as reqExport};
